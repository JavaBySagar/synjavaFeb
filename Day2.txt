Lab 8 - Run the code with different file sizes and buffer size (1mb, 100 mb, 500mg)
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.Channel;
import java.nio.channels.FileChannel;
import java.util.Scanner;

public class NIOCopy {

	public static void main(String[] args) throws Exception {
		System.out.println("Enter a number to continue..");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();
		
		File source = new File(args[0]);
		File dest = new File(args[1]);
		long starttime = System.currentTimeMillis();
		FileInputStream is = null;
		FileOutputStream os = null;
		FileChannel inputchannel = null;
		FileChannel outputchannel = null;
		try {
			is = new FileInputStream(source);
			os = new FileOutputStream(dest);
			inputchannel = is.getChannel();
			outputchannel = os.getChannel();
			ByteBuffer buffer = ByteBuffer.allocate(1024*12);
			int i = 0;
			do {
				buffer.clear();
				i = inputchannel.read(buffer);
				buffer.flip();
				outputchannel.write(buffer);
			} while (i != -1);

		} finally {
			is.close();
			os.close();
		}
		long endtime = System.currentTimeMillis();
		System.out.println("Time taken to copy " + source.length() / 1024 + "kbs  is " + (endtime - starttime) + " ms");
	}
}



Lab 7 - Map vs FlatMap
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Lab2 {

	public static void main(String[] args) {
		List<String> list1 = new ArrayList<>();
		list1.add("aa"); list1.add("bb");
		
		List<String> list2 = new ArrayList<>();
		list2.add("cc"); list2.add("dd");
		
		List<String> list3 = new ArrayList<>();
		list3.add("ee"); list3.add("ff");
		
		List<List<String>> list = new ArrayList<>();
		list.add(list1); list.add(list2); list.add(list3);
		
		System.out.println(list);
		
		list.stream().map(l->l.get(0)).forEach(System.out::println);
		//Returns a stream consisting of the results of applying the given function to the elements of this stream.
		
		System.out.println("after flatmap");
		list.stream().flatMap(fm->fm.stream()).forEach(System.out::println);
		//Returns a stream consisting of the results of replacing each element of this stream 
		//with the contents of a mapped stream produced by applying the provided 
		//mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.)
			
	}

}


Lab 6 - Create a class 
	public class Emp {
		private int empno;
		private String ename;
		private double salary;
		private String dept; + get/set + toString}
	
	class EmpMgr {
	public static List<Emp> createemp() {
		List<Emp> list = new ArrayList<Emp>();
		List<String> names = Stream.of("Simran", "Saloni", "Asha", "Vaishali", "Lili").collect(Collectors.toList());
		List<String> departments = Stream.of("HR", "TRN", "TA", "FIN").collect(Collectors.toList());

		for (int i = 0; i < 50; i++) {
			Emp e1 = new Emp();
			e1.setEmpno(i + 1);
			e1.setEname(names.get(i % names.size()));
			e1.setDept(departments.get(i % departments.size()));
			e1.setSalary((int) (Math.random() * 1000));
			list.add(e1);
		}
		return list;
		}
	}

	public class Lab1 {

		public static void main(String[] args) {
			List<Emp> list = EmpMgr.createemp();

			  Stream<Emp> original = list.stream(); 
			  Stream<Emp> empstr = 	  original.filter((e)->e.getDept().equals("HR"));
			  empstr.forEach(System.out::println);

			  double sumforhr = list.stream().filter((e)->e.getDept().equals("HR")).mapToDouble((e)->e.getSalary()).sum();
			  System.out.println("sumfor HR = " + sumforhr);
			  double sumforfin = list.stream().filter((e)->e.getDept().equals("FIN")).mapToDouble((e)->e.getSalary()).sum();
			  System.out.println("sumfor FIN = " + sumforfin);

			  // Compute sum of salaries by department
			    Map<String, Double> totalByDept
				 = list.stream()
					    .collect(Collectors.groupingBy(Emp::getDept,
									   Collectors.summingDouble(Emp::getSalary)));
			    System.out.println(totalByDept);

		}
	}
	
	Modify to create a map of list of employees in each department and also show count of employees
	
	
Lab 5 - For emp create 50000 records
	list.stream().filter((e)->e.getEname().startsWith("V")).forEach( e-> System.out.print(e.getEmpno()+" - " +e.getEname() +","));
	list.parallelStream().filter((e)->e.getEname().startsWith("V")).forEach( e-> System.out.print(e.getEmpno()+" - " +e.getEname() +","));
	Check threads using jvisualvm
	
		
Lab 4 - 	Stream<Integer> strint = Stream.of(104,300,400,300,104,155);
		List<String> list = new ArrayList<>();
		list.add("a"); list.add("bb");list.add("ccc");list.add("ddd");
	
		List<Integer> strlist = strint.distinct().collect(Collectors.toList());	
		System.out.println(strlist);
		
	create a list of names where string length is < 3. 	
		
Lab 3 - 
	SHow sum of all employees salary. (first call map and then reduce)
	Show max of salary
	
Lab 2 - 	//list.stream().skip(5).limit(10).forEach(System.out::println);
	Create code for pagenation, show first 10 records and show P/N option, accept it from user and print data accordingly

Lab 1 - 		List<String> list = new ArrayList<>();
		list.add("a"); list.add("bb");list.add("ccc");list.add("dddd");
		list.stream().filter(x->x.length() >2).forEach(System.out::println);
		
		Optional<String> optionalstring = list.stream().filter(x->x.length() >4).findFirst();
		if (optionalstring.isPresent())
				System.out.println("First Element - " + optionalstring.get());
		else
				System.out.println("No element found");

  Write a Lab3.java to create 10 elements list for Emp Object ( empno, ename, salary)
    1. Filter all records where salary > somenumber
    2. Show a record is empno is matching (Filter,Findfirst)
    3. Show records where salary is between .. and ..
    4. Show all employee where ename length is 5 characters
